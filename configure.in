AC_INIT(wxOil/camelot.cpp)
AC_CANONICAL_TARGET
AM_INIT_AUTOMAKE(XaraLX, 0.3)

DEBUG_FLAGS=""
OPT_FLAGS="-O3"
DebugEnable="no"
AC_ARG_ENABLE(debug,
[[  --enable-debug          Add more debug information and checks to executable]],
[
		DEBUG_FLAGS="-ggdb -D_DEBUG"
		OPT_FLAGS="-O0"
		DebugEnable="yes"
])

StaticEnable="no"
AC_ARG_ENABLE(static-exec,
[[  --enable-static-exec    Build a statically linked version of the executable]],
[
	StaticEnable="yes"
	DebugEnable="no"
])

# Set language - this should be taken from a configure option
# Note this MUST be in ISO8859-1 form

# Stop automake directly including stuff
XRCINCLUDE=include

# Setup our build flags (if not set by user)
if test -z "$CFLAGS"; then
	CFLAGS="-Wall -Wno-unknown-pragmas -g -fexceptions $OPT_FLAGS $DEBUG_FLAGS"
else
	CFLAGS="$CFLAGS -Wall -Wno-unknown-pragmas -g -fexceptions $DEBUG_FLAGS"
fi
if test -z "$CXXFLAGS"; then
	CXXFLAGS="-Wall -Wno-unknown-pragmas -g -fexceptions $OPT_FLAGS $DEBUG_FLAGS"
else
	CXXFLAGS="$CXXFLAGS -Wall -Wno-unknown-pragmas -g -fexceptions $DEBUG_FLAGS"
fi

AC_PROG_CXX
AC_PROG_INSTALL
# We don't need dlopen right now and it's not supported on Darwin
# AC_LIBTOOL_DLOPEN
AC_PROG_LIBTOOL

AC_C_BIGENDIAN
AC_CHECK_SIZEOF(void*)
AC_CHECK_SIZEOF(long long)
AC_CHECK_SIZEOF(long)
AC_CHECK_SIZEOF(int)
AC_CHECK_SIZEOF(short)
AC_CHECK_SIZEOF(__int64)

# Test for GCC and version
GccVersion=0
PrecompileEnable="yes"

AC_MSG_CHECKING([Compiler])
if test $ac_compiler_gnu == "yes"; then
	GccVersion=`$CXX -v 2>&1 | $AWK '{ if ($2 ~ /version/) print $3 }'`
	GccVersion=`echo $GccVersion | $AWK 'BEGIN { FS = "."; } { printf "% d", ($1 * 1000 + $2) * 1000 + $3;}'`

	if test -n "$GccVersion" && test "$GccVersion" -ge 3004000; then
		AC_MSG_RESULT([gcc >= 3.4.0, PreCompiled headers enabled])
		PrecopmpileEnable="yes"
	else
		AC_MSG_RESULT([gcc < 3.4.0, PreCompiled headers disabled])
		PrecompileEnable="no"
	fi
else
	AC_MSG_RESULT([non-gcc, PreCompiled headers disabled])
	PrecompileEnable="no"
fi

WXCONFIG=wx-config
AC_ARG_WITH(wx-config,
[[  --with-wx-config=FILE   Use the given path to wx-config when determining
                            wxWidgets configuration; defaults to "wx-config"]],
[
    if test "$withval" != "yes" -a "$withval" != ""; then
        WXCONFIG=$withval
    fi
])

XARALANGUAGE=EN
AC_ARG_WITH(language,
[[  --with-language=LANG    Use ISO8859-1 country code LANG for resource
                            language; defaults to "EN"]],
[
    if test "$withval" != "yes" -a "$withval" != ""; then
        XARALANGUAGE=$withval
    fi
])

wxversion=0

AC_DEFUN([WXTEST],
[
	AC_REQUIRE([AC_PROG_AWK])
	AC_MSG_CHECKING([wxWidgets version])
	if wxversion=`$WXCONFIG --version`; then
		AC_MSG_RESULT([$wxversion])
	else
		AC_MSG_RESULT([not found])
		AC_MSG_ERROR([wxWidgets is required. Try --with-wx-config.])
	fi])

# Call WXTEST func
WXTEST

GTK_CFLAGS=""
GTK_LIBS=""

# Verify minimus requires
vers=`echo $wxversion | $AWK 'BEGIN { FS = "."; } { printf "% d", ($1 * 1000 + $2) * 1000 + $3;}'`
if test -n "$vers" && test "$vers" -ge 2006003; then
	WX_CPPFLAGS="`$WXCONFIG --static=$StaticEnable --debug=$DebugEnable --unicode=yes --cppflags`"
	WX_CXXFLAGS="`$WXCONFIG --static=$StaticEnable --debug=$DebugEnable --unicode=yes --cxxflags | sed -e 's/-fno-exceptions//'`"
	WX_LIBS="`$WXCONFIG --static=$StaticEnable --debug=$DebugEnable --unicode=yes --libs`"
	WXRC="`$WXCONFIG --utility=wxrc`"
	
	# See if we are running on GTK
	WX_GTK="no"
	AC_MSG_CHECKING([wxWidgets GTK usage])
	if echo $WX_CPPFLAGS | grep -q '__WXGTK__' ; then 
		WX_GTK="yes"
		AC_MSG_RESULT([found])
		PKG_CHECK_MODULES(GTK, [gtk+-2.0])
	else
		AC_MSG_RESULT([not found])
	fi

else
	AC_MSG_ERROR([wxWidgets 2.6.3 or newer is required (2.6.3-rc2 will do)])
fi

TOPDIR=$srcdir;
if test `echo $srcdir | cut -c1` != "/"; then
	TOPDIR="../$srcdir";
fi

if test "$StaticEnable" = "yes"; then
	CPPFLAGS="$CPPFLAGS -static -static-libgcc"
	CXXFLAGS="$CXXFLAGS -static -static-libgcc"
fi

CPPFLAGS="$CPPFLAGS $WX_CPPFLAGS"
CXXFLAGS="$CXXFLAGS $WX_CPPFLAGS"

AC_MSG_CHECKING([Linker])
case $host in
    *-*-darwin*)
		AC_MSG_RESULT([Darwin ld])
        DarwinLink="yes";;
    *)
		AC_MSG_RESULT([GNU ld])
        DarwinLink="no";;
esac

CDRAW_LIB_DIR=""
AC_MSG_CHECKING([CDraw location])
case $target in
    *-*-darwin*)
	AC_MSG_RESULT([libs/darwin])
	CDRAW_LIB_DIR="libs/darwin";;
    i?86-*)
	AC_MSG_RESULT([libs/x86])
	CDRAW_LIB_DIR="libs/x86";;
    amd64-* | x86_64-*)
	AC_MSG_RESULT([libs/x86_64])
	CDRAW_LIB_DIR="libs/x86_64";;
    *)
	AC_MSG_ERROR([Architecture $target not supported])
esac

AM_GNU_GETTEXT([external])
AM_GNU_GETTEXT_VERSION([0.14.3])

AM_CONDITIONAL(PRECOMPILE_ENABLE, [test "$PrecompileEnable" = "yes"])
AM_CONDITIONAL(STATIC_ENABLE, [test "$StaticEnable" = "yes"])
AM_CONDITIONAL(DARWIN_LINK, [test "$DarwinLink" = "yes"])

AC_SUBST(TOPDIR)
AC_SUBST(WX_LIBS)
AC_SUBST(XRCINCLUDE)
AC_SUBST(XARALANGUAGE)
AC_SUBST(WXRC)
AC_SUBST(VERSION)
AC_SUBST(GTK_CFLAGS)
AC_SUBST(GTK_LIBS)
AC_SUBST(CDRAW_LIB_DIR)

AC_OUTPUT(Makefile PreComp/Makefile Kernel/Makefile wxOil/Makefile tools/Makefile wxXtra/Makefile po/Makefile.in)
