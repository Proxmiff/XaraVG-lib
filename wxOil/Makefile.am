#########################################################################
# LIBRARY SECTION
#########################################################################
# this is the program that gets installed.  it's name is used for all
# of the other Makefile.am variables
BUILT_SOURCES	= svnversion.h
# Note we don't clean xrc.d and xrc.stamp here to avoid a loop
CLEANFILES		= svnversion.h
MOSTLYCLEANFILES = resources.cpp xrc/dialogs.xrc xrc/strings.xrc xrc/strings.lst xrc/xaralx.po xrc/resources.xrs resources.cpp xrc/xrc.check
noinst_LIBRARIES	= libwxOil.a

# This is a hack. It should come from configure. It is the ISO language code
XARALANGUAGE = @XARALANGUAGE@

version svnversion.h:
	@echo "const TCHAR g_pszSvnVersion[] = wxT(\"`svnversion $(TOPDIR)`\");" > svnversion.h
	@echo "const TCHAR g_pszAppVersion[] = wxT(\"$(VERSION)\");" >> svnversion.h
	@echo "#define	CAMELOT_VERSION_MAJOR	`echo $(VERSION) | $(AWK) 'BEGIN { FS = "."; } { printf $$1;}'`" >> svnversion.h
	@echo "#define	CAMELOT_VERSION_MINOR	`echo $(VERSION) | $(AWK) 'BEGIN { FS = "."; } { printf $$2;}'`" >> svnversion.h
	@echo "#define	CAMELOT_VERSION			$(VERSION)" >> svnversion.h
	@echo "#define	CAMELOT_VERSION_STRING	wxT(\"$(VERSION) ($(USER))\")" >> svnversion.h
	@echo "#define  CAMELOT_BUILD_DATE _T(\"`date +"%d-%b-%y %H:%M"`\")" >> svnversion.h	

# the application source, library search path, and link libraries
libwxOil_a_SOURCES = \
	varstr.cpp \
	basestr.cpp camdoc.cpp camelot.cpp camframe.cpp \
	camview.cpp ccobject.cpp ccdc.cpp clikmods.cpp convert.cpp \
	diagnost.cpp dibconv.cpp dibutil.cpp dlgmgr.cpp dlgview.cpp ensure.cpp \
	errors.cpp filehndl.cpp filesize.cpp fixmem.cpp fixstr8.cpp fixstr16.cpp \
	fixstr32.cpp fixstr64.cpp fixst128.cpp fixst256.cpp handles.cpp makemsg.cpp \
	memblk.cpp memory.cpp monotime.cpp mtrand.cpp oilbitmap.cpp oilcoord.cpp \
	oildbug.cpp oilrect.cpp pathname.cpp pathnmex.cpp pen.cpp sgliboil.cpp \
	tunemem.cpp unicdman.cpp vstate.cpp wincoord.cpp oilfiles.cpp oilmenus.cpp \
	winrect.cpp grndrgn.cpp osrndrgn.cpp maskedrr.cpp grndbmp.cpp rendbits.cpp \
	palman.cpp gdrawcon.cpp fuzzclip.cpp cursor.cpp pngfiltr.cpp pngutil.cpp \
	maskfilt.cpp oilfltrs.cpp speedtst.cpp gbrush.cpp grnddib.cpp grndclik.cpp \
	offscrn.cpp camprofile.cpp localenv.cpp camresource.cpp oilmods.cpp \
	progress.cpp dockbar.cpp basebar2.cpp keypress.cpp sgindgen.cpp \
	dlgevt.cpp cartprov.cpp cartctl.cpp colourmat.cpp menucmds.cpp menupref.cpp \
	rendwnd.cpp scroller.cpp helpuser.cpp oilprefs.cpp dragtrgt.cpp \
	ctrllist.cpp dlgcol.cpp thumb.cpp dragmgr.cpp ccolbar.cpp dragcol.cpp \
	drawctl.cpp filedlgs.cpp fileutil.cpp ktimer.cpp camplatform.cpp \
	outptdib.cpp outptpng.cpp outptgif.cpp gpalopt.cpp bmpfiltr.cpp giffiltr.cpp \
	fontbase.cpp ftfonts.cpp textfuns.cpp dragbmp.cpp xpoilflt.cpp xmlutils.cpp \
	camprocess.cpp dropdown.cpp coldrop.cpp fontdrop.cpp bfxalu.cpp bfxpixop.cpp \
	binreloc.c \
	resources.cpp

# Keep resources.cpp (the autogenerated resource file) on a separate line.

AM_CXXFLAGS = $(XARAFLAGS)

# RESOURCES MAKE SYSTEM
#
# Please do not fiddle unless you understand this. The idea is that you can drop in or out resources, and it will automagically
# remake dependencies etc.

# This makes the dependencies every time the makefile is run (a simple case of running find)
# Note we make sure if the deps have not changed that we don't rewrite the file, else we get into an
# infinite loop as "include" notices and rereads the file. Note this is a := assignment, so runs
# early on
xrcmake := ${shell echo Testing for new resources... 1>&2 ; \
	if( test ! -d xrc ) ; then mkdir xrc; fi; \
	( find $(TOPDIR)/wxOil/xrc/$(XARALANGUAGE) -maxdepth 1 -name '*.xrc' ; find $(TOPDIR)/wxOil/xrc -maxdepth 1 -name '*.png' -or -name '*.ico' -or -name '*.cur' -or -name '*.bmp' -or -name '*.res' -or -name '*.xar' ) | \
	perl -e 'while(<>) {chomp; s/\r//; push @F, $$_}; printf "xrc/dialogs.xrc xrc/strings.xrc xrc/strings.lst xrc/xaralx.po: xrc/xrc.stamp %s\n",join (" ",sort @F);' > xrc/xrc.d.$$$$ ; \
	if ( ! ( cmp -s xrc/xrc.d.$$$$ xrc/xrc.d) ) ; then touch xrc/xrc.stamp ; mv xrc/xrc.d.$$$$ xrc/xrc.d ; echo Found new resources 1>&2 ; \
	else rm -f xrc/xrc.d.$$$$; fi ; \
	if ! [ -e xrc/xrc.stamp ] ; then touch xrc/xrc.stamp ; fi }

# This gives us a target for the dialogs
@XRCINCLUDE@ xrc/xrc.d

# Define shell commands to get the names of the stringtables, dialogs and bitmaps. Note these are '=' assignments, so
# evaluated later
XRCDIALOGS = ${shell perl -ane 'foreach $$f (@F) { push @G,$$f if $$f=~/${XARALANGUAGE}\/.+\.xrc$$/ && $$f!~/-strings\.xrc$$/};print join(" ",@G)."\n";' < xrc/xrc.d }
# For now, include dialogs in strings table, which ensures reverse lookups are done
#XRCSTRINGS = ${shell perl -ane 'foreach $$f (@F) { push @G,$$f if $$f=~/${XARALANGUAGE}\/.+\.xrc$$/ && $$f=~/-strings\.xrc$$/};print join(" ",@G)."\n";' < xrc/xrc.d }
XRCSTRINGS = ${shell perl -ane 'foreach $$f (@F) { push @G,$$f if $$f=~/${XARALANGUAGE}\/.+\.xrc$$/ };print join(" ",@G)."\n";' < xrc/xrc.d }
XRCBITMAPS = ${shell perl -ane 'foreach $$f (@F) { push @G,$$f if $$f=~/\.(png|ico|cur|bmp|res|xar)$$/};print join(" ",@G)."\n";' < xrc/xrc.d }

# A checksum routine - it doesn't much matter what it is
CHECKSUM = md5sum
ZIP = zip

.PHONY: resources
resources: resources.cpp

# We build these two as a pair to match xrc.d (probably unnecessary but makes things clearer, and this bit is
# very quick compared to wxrc and the compile time for resources.cpp so adds hardly anything)
# the cp is to trick gettext\autoconf into using our template file
xrc/dialogs.xrc xrc/strings.xrc xrc/strings.lst xrc/xaralx.po: xrc/xrc.stamp
	@echo "Combining dialog & string resources" && \
	touch xrc/strings.xrc && \
	$(TOPDIR)/Scripts/combinexrc.pl -b missing.png -o xrc/dialogs.xrc $(XRCDIALOGS) && \
	$(TOPDIR)/Scripts/combinexrc.pl -b missing.png -t -s -o xrc/strings.lst $(XRCSTRINGS) && \
	( perl -ne 'chomp;s/^\S+\t//;print "_(\"$$_\");\n";' < xrc/strings.lst && @WXRC@ -g xrc/dialogs.xrc) | sort -u | \
	perl -ne 'print unless /^_\(\"\"\)\;\s+$$/;' | sed 's/&amp;/\&/g' | \
	${XGETTEXT} --force-po -k_ -C -i - --no-location --copyright-holder "Xara Group Ltd" --msgid-bugs-address=bugs@xara.com -d xaralx -o xrc/xaralx.po

# Don't produce strings.xrc any more
#	$(TOPDIR)/Scripts/combinexrc.pl -b missing.png -s -o xrc/strings.xrc $(XRCSTRINGS);

# No need for resources.cpp explicitly to depend on the bitmaps, as dialogs.xrc and strings.xrc depend on these
# (though they don't need to) but they will get rebuilt if the bitmaps change. This will cause xrc/resources.to be
# rebuilt. This avoids complicating xrc.d

xrc/xrc.check xrc/resources.xrs: xrc/xrc.d xrc/dialogs.xrc xrc/strings.xrc xrc/strings.lst
	@echo "Generating resource checksum" && \
	( cat xrc/dialogs.xrc xrc/strings.xrc xrc/strings.lst $(XRCBITMAPS) | $(CHECKSUM) | awk '{print $$1}' > xrc/xrc.check ) && \
	$(ZIP) -9 -j -q xrc/resources.xrs xrc/xrc.check xrc/dialogs.xrc xrc/strings.xrc xrc/strings.lst $(XRCBITMAPS)

resources.cpp: xrc/resources.xrs xrc/xaralx.po
	$(TOPDIR)/Scripts/bin2cpp.pl -f CamResource::GetBinaryFileInfo xrc/resources.xrs resources.cpp
